/**
 * a function which checks if the 
 * @param {} target 
 * @returns 
 */
function checkIfValid(target) {

    /*
    console.log("VALIDITY CHECK");
    let trueTargetSquare
    let targetId
    console.log(target.getAttribute('square-id') !== null);
    console.log(target.parentNode.getAttribute('square-id') !== null);
    console.log(target.parentNode.parentNode.getAttribute('square-id') !== null);


    //if the target is the square itself
    if (target.getAttribute('square-id') !== null) {
        console.log("target is the square");
        targetId = Number(target.getAttribute('square-id')); 
        trueTargetSquare = target; /////
        console.log('targetId', targetId);
    
    //if the target is the piece inside the square
    } else if (target.parentNode.getAttribute('square-id') !== null) {
        console.log("target is the piece");
        targetId = Number(target.parentNode.getAttribute('square-id'));
        trueTargetSquare = target.parentNode;
        console.log('targetId', targetId);

    //if the target is the icon inside the piece inside the square
    } else if (target.parentNode.parentNode.getAttribute('square-id') !== null) {
        console.log("target is the icon");
        targetId = Number(target.parentNode.parentNode.getAttribute('square-id'));
        trueTargetSquare = target.parentNode.parentNode;
        console.log('targetId', targetId);
    }
    const startId = Number(startPositionId)
    const piece = draggedElement.id
    console.log('target', target);
    console.log("target's parent", target.parentNode);
    console.log("target's grandparent", target.parentNode.parentNode);
    console.log('startId', startId);
    console.log('targetId', targetId);
    console.log('piece', piece);

    switch (piece) {
        case 'pawn':
            const starterRow = [8, 9, 10, 11, 12, 13, 14, 15]

            //checks if the pawn is at starting position, and wants to move 2 squares forward
            if (starterRow.includes(startId) && (startId + width * 2 === targetId || startId + width === targetId)) {
                return true;
            }

            //checks if the pawn wants to move one square forward
            if (startId + width === targetId && !trueTargetSquare.firstChild.classList.contains('piece')) {
                return true;
            }
            
            //checks if the pawn wants to take diagonally to the right
            if (startId + width - 1 === targetId && trueTargetSquare.firstChild.classList.contains('piece')) {
                return true;
            }

            //checks if the pawn wants to take diagonally to the left
            if (startId + width + 1 === targetId && trueTargetSquare.firstChild.classList.contains('piece')) {
                return true;
            }
            return false;
        /*
            console.log("PAWN HAS BEEN MOVED");
            const starterRow = [8, 9, 10, 11, 12, 13, 14, 15]
            if (
            starterRow.includes(startId) && startId + width * 2 === targetId
            || startId + width === targetId
            || startId + width - 1 === targetId && document.querySelector('[square-id="${startId + width - 1}"]').firstChild
            || startId + width + 1 === targetId && document.querySelector('[square-id="${startId + width + 1}"]').firstChild) 
            {
                return true
            } 
            const newRow = [48, 49, 50, 51, 52, 53, 54, 55]
            if (
            newRow.includes(startId) && startId - width * 2 === targetId
            || startId - width === targetId
            || startId - width - 1 === targetId && document.querySelector('[square-id="${startId + width - 1}"]').firstChild
            || startId - width + 1 === targetId && document.querySelector('[square-id="${startId + width + 1}"]').firstChild) 
            {
                return true
            } 
            break; 

        case 'knight':
            console.log("KNIGHT HAS BEEN MOVED");
            if (
                startId + width * 2 + 1 === targetId ||
                startId + width * 2 - 1 === targetId ||
                startId + width - 2 === targetId ||
                startId + width + 2 === targetId ||
                startId - width * 2 + 1 === targetId ||
                startId - width * 2 - 1 === targetId ||
                startId - width - 2 === targetId ||
                startId - width + 2 === targetId
                ) {
                    return true
            }
            break;
            
        case 'bishop':
            console.log("BISHOP MOVEMENT: ");
            const isDiagonalMove = Math.abs(targetId % width - startId % width) === Math.abs(Math.floor(targetId / width) - Math.floor(startId / width))
            if (isDiagonalMove) {
                const directionX = targetId % width > startId % width ? 1 : -1;
                const directionY = Math.floor(targetId / width) > Math.floor(startId / width) ? 1 : -1;

                let currentSquare = startId + width * directionY + directionX;
                while (currentSquare !== targetId) {

                    const currentSquareElement = document.querySelector(`[square-id="${currentSquare}"]`);

                    console.log("currently on: " + currentSquareElement.firstChild);
                    if (!currentSquareElement) {
                        return false;
                    }

                    const squareContent = currentSquareElement.firstChild;
                    console.log(squareContent);
                    if (squareContent && currentSquare !== targetId) {
                        return false;
                    }
                    currentSquare += width * directionY + directionX;
                    console.log("moved to: " + currentSquare)
                }
                return true
            } 
            break;

        case 'rook':
            console.log("ROOK HAS BEEN MOVED");
            const isVerticalMove = startId % width === targetId % width;
            const isHorizontalMove = Math.floor(startId / width) === Math.floor(targetId / width);
            if (isVerticalMove) {
                const direction = targetId > startId ? 1 : -1;
                const increment = width * direction;

                let currentSquare = startId + increment;

                while (currentSquare !== targetId) {
                    const currentSquareElement = document.querySelector(`[square-id="${currentSquare}"]`);
                    if (!currentSquareElement) {
                        return false;
                    }

                    const squareContent = currentSquareElement.firstChild;
                    if (squareContent) {
                        return false;
                    }
                    currentSquare += increment;
                }
                return true;
            } else if (isHorizontalMove) {
                const direction = targetId > startId ? 1 : -1;
                const increment = direction;

                let currentSquare = startId + increment;

                while (currentSquare !== targetId) {
                    const currentSquareElement = document.querySelector(`[square-id="${currentSquare}"]`);
                    if (!currentSquareElement) {
                        return false;
                    }

                    const squareContent = currentSquareElement.firstChild;
                    if (squareContent) {
                        return false;
                    }
                    currentSquare += increment;
                }
                return true;
            } else {
                break;
            }
        case 'queen':
            console.log("QUEEN HAS BEEN MOVED");
            const isDiagonalMove_Queen = Math.abs(targetId % width - startId % width) === Math.abs(Math.floor(targetId / width) - Math.floor(startId / width))
            const isVerticalMove_Queen = startId % width === targetId % width;
            const isHorizontalMove_Queen = Math.floor(startId / width) === Math.floor(targetId / width);
            if (isDiagonalMove_Queen) {
                const directionX = targetId % width > startId % width ? 1 : -1;
                const directionY = Math.floor(targetId / width) > Math.floor(startId / width) ? 1 : -1;

                let currentSquare = startId + width * directionY + directionX;

                while (currentSquare !== targetId) {
                    const currentSquareElement = document.querySelector(`[square-id="${currentSquare}"]`);
                    if (!currentSquareElement) {
                        return false;
                    }
                    const squareContent = currentSquareElement.firstChild;
                    if (squareContent) {
                        return false;
                    }
                    currentSquare += width * directionY + directionX;
                }
                return true
            } else if (isVerticalMove_Queen) {
                const direction = targetId > startId ? 1 : -1;
                const increment = width * direction;

                let currentSquare = startId + increment;

                while (currentSquare !== targetId) {
                    const currentSquareElement = document.querySelector(`[square-id="${currentSquare}"]`);
                    if (!currentSquareElement) {
                        return false;
                    }

                    const squareContent = currentSquareElement.firstChild;
                    if (squareContent) {
                        return false;
                    }
                    currentSquare += increment;
                }
                return true;
            } else if (isHorizontalMove_Queen) {
                const direction = targetId > startId ? 1 : -1;
                const increment = direction;

                let currentSquare = startId + increment;

                while (currentSquare !== targetId) {
                    const currentSquareElement = document.querySelector(`[square-id="${currentSquare}"]`);
                    if (!currentSquareElement) {
                        return false;
                    }

                    const squareContent = currentSquareElement.firstChild;
                    if (squareContent) {
                        return false;
                    }
                    currentSquare += increment;
                }
                return true;
            } else {
                break;
            }
        case 'king':
            if (
                startId + 1 === targetId ||
                startId - 1 === targetId ||
                startId + width === targetId ||
                startId - width === targetId ||
                startId + width - 1 === targetId ||
                startId + width + 1 === targetId ||
                startId - width - 1 === targetId ||
                startId - width + 1 === targetId
            ) {
                return true
            }
            break;
    }
    */
}